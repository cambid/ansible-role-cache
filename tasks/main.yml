---

- name: "check that the file cache exists"
  stat:
    path: /usr/bin/cache
  register: stat_result

- name: "only execute tasks if cache is installed"
  block:
    - name: "get installed version of cache"
      command: ccontrol qlist
      register: qlist
      changed_when: False

    - name: "set fact for version of cache"
      set_fact:
        installed_version: "{{ qlist.stdout.split('^')[2] }}"
      when: qlist.stdout

    - name: "compare installed version and requested version of cache"
      meta: end_host
      when: installed_version == hs_distribution_version
  when: stat_result.stat.exists

- name: "check that the file iris exists"
  stat:
    path: /usr/bin/iris
  register: stat_result

- name: "only execute tasks if iris is installed"
  block:
    - name: "get installed version of iris"
      command: iris qlist
      register: qlist
      changed_when: False

    - name: "set fact for version of iris"
      set_fact:
        installed_version: "{{ qlist.stdout.split('^')[2] }}"
      when: qlist.stdout

    - name: "compare installed version and requested version of cache"
      meta: end_host
      when: installed_version == hs_distribution_version
  when: stat_result.stat.exists

- name: "include os-specific variables"
  include_vars: os-{{ ansible_os_family }}.yml
  when: ansible_os_family == 'RedHat'

- name: "include distribution specific variables"
  include_vars: os-{{ ansible_distribution }}.yml
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'SLES'

- name: "append version if newer IRIS version"
  set_fact:
    hs_distribution_name: "{{ hs_distribution_name }}{{ ansible_distribution_version | replace ('.','') }}"
  when:
    - hs_distribution_version is version('2021.2.0.649.0', '>=')
    - ansible_distribution == 'Ubuntu'

- name: "append version if newer IRIS version"
  set_fact:
    hs_distribution_name: "{{ hs_distribution_name }}{{ ansible_distribution_major_version }}"
  when:
    - hs_distribution_version is version('2021.2.0.649.0', '>=')
    - ansible_os_family == 'RedHat' or ansible_distribution == 'SLES'

- include_tasks: setup-{{ ansible_os_family }}.yml
  when:
    - ansible_os_family == 'RedHat'
    - ansible_virtualization_type != 'docker'

- include_tasks: setup-{{ ansible_distribution }}.yml
  when:
    - ansible_distribution == 'Ubuntu' or ansible_distribution == 'SLES'
    - ansible_virtualization_type != 'docker'

- include_tasks: configure-cache.yml
